require "../lib/vdevserver.rb"
require "../lib/escseq"
require "io/console"

class RZ80Console < VdevServer

  # 画面サイズ
  DISP_WIDTH  = 40
  DISP_HEIGHT = 25
  
  def initialize()
    super

    # Display Code -> Shift-JIS
    @charmap = [
      #0x00: SP, ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯ
      0xf040, 0xf041, 0xf042, 0xf043, 0xf044, 0xf045, 0xf046, 0xf047,
      0xf048, 0xf049, 0xf04a, 0xf04b, 0xf04c, 0xf04d, 0xf04e, 0xf04f,
      
      #0x10: ＰＱＲＳＴＵＶＷＸＹＺ┼└┘├┴
      0xf050, 0xf051, 0xf052, 0xf053, 0xf054, 0xf055, 0xf056, 0xf057,
      0xf058, 0xf059, 0xf05a, 0xf05b, 0xf05c, 0xf05d, 0xf05e, 0xf05f,
      
      #0x20: ０１２３４５６７８９－＝；／．，
      0xf060, 0xf061, 0xf062, 0xf063, 0xf064, 0xf065, 0xf066, 0xf067,
      0xf068, 0xf069, 0xf06a, 0xf06b, 0xf06c, 0xf06d, 0xf06e, 0xf06f,
      
      #0x30:
      0xf070, 0xf071, 0xf072, 0xf073, 0xf074, 0xf075, 0xf076, 0xf077,
      0xf078, 0xf079, 0xf07a, 0xf07b, 0xf07c, 0xf07d, 0xf07e, 0xf080,

      #0x40: ♠　♦♣●○？：←
      0xf040, 0xf081, 0xf082, 0xf083, 0xf084, 0xf085, 0xf086, 0xf087,
      0xf088, 0xf089, 0xf08a, 0xf08b, 0xf08c, 0xf08d, 0xf08e, 0xf08f,

      #0x50: ↑＜［♥］＠＞＼┌┤┬
      0xf090, 0xf091, 0xf092, 0xf093, 0xf094, 0xf095, 0xf096, 0xf097,
      0xf098, 0xf099, 0xf09a, 0xf09b, 0xf09c, 0xf09d, 0xf09e, 0xf09f,

      #0x60: π！”＃＄％＆’（）＋＊
      0xf0a0, 0xf0a1, 0xf0a2, 0xf0a3, 0xf0a4, 0xf0a5, 0xf0a6, 0xf0a7,
      0xf0a8, 0xf0a9, 0xf0aa, 0xf0ab, 0xf0ac, 0xf0ad, 0xf0ae, 0xf0af,

      #0x70:
      0xf0b0, 0xf0b1, 0xf0b2, 0xf0b3, 0xf0b4, 0xf0b5, 0xf0b6, 0xf0b7,
      0xf0b8, 0xf0b9, 0xf0ba, 0xf0bb, 0xf0bc, 0xf0bd, 0xf0be, 0xf0bf,

      #0x80:　チコソシイハキクニマノリモミラ
      0xf040, 0xf0c0, 0xf0c1, 0xf0c2, 0xf0c3, 0xf0c4, 0xf0c5, 0xf0c6,
      0xf0c7, 0xf0c8, 0xf0c9, 0xf0ca, 0xf0cb, 0xf0cc, 0xf0cd, 0xf0ce,

      #0x90: セタストカナヒテサンツロケ「ァャ
      0xf0cf, 0xf0d0, 0xf0d1, 0xf0d2, 0xf0d3, 0xf0d4, 0xf0d5, 0xf0d6,
      0xf0d7, 0xf0d8, 0xf0d9, 0xf0da, 0xf0db, 0xf0dc, 0xf0dd, 0xf0de,

      #0xA0: ワヌフアウエオヤユヨホヘレメルネ
      0xf0df, 0xf0e0, 0xf0e1, 0xf0e2, 0xf0e3, 0xf0e4, 0xf0e5, 0xf0e6,
      0xf0e7, 0xf0e8, 0xf0e9, 0xf0ea, 0xf0eb, 0xf0ec, 0xf0ed, 0xf0ee,

      #0xB0: ム」ィュヲ、ゥョ゜．ェッ゛。ォ‐
      0xf0ef, 0xf0f0, 0xf0f1, 0xf0f2, 0xf0f3, 0xf0f4, 0xf0f5, 0xf0f6,
      0xf0f7, 0xf0f8, 0xf0f9, 0xf0fa, 0xf0fb, 0xf0fc, 0xf140, 0xf141,

      #0xC0:
      0xf142, 0xf143, 0xf144, 0xf145, 0xf146, 0xf147, 0xf148, 0xf149,
      0xf14a, 0xf14b, 0xf14c, 0xf14d, 0xf14e, 0xf14f, 0xf150, 0xf151,

      #0xD0: 日月火水木金土生年時分秒円￥￡
      0xf152, 0xf153, 0xf154, 0xf155, 0xf156, 0xf157, 0xf158, 0xf159,
      0xf15a, 0xf15b, 0xf15c, 0xf15d, 0xf15e, 0xf15f, 0xf160, 0xf161,

      #0xE0:
      0xf162, 0xf163, 0xf164, 0xf165, 0xf166, 0xf167, 0xf168, 0xf169,
      0xf16a, 0xf16b, 0xf16c, 0xf16d, 0xf16e, 0xf16f, 0xf170, 0xf171,

      #0xF0:
      0xf172, 0xf173, 0xf174, 0xf175, 0xf176, 0xf177, 0xf178, 0xf179,
      0xf17a, 0xf17b, 0xf17c, 0xf17d, 0xf17e, 0xf180, 0xf181, 0xf182
    ]
    
  end

  def receive_data(buff)
    return true if buff == "END"
    
    params = buff.split
    addr = params.shift.hex
    params.each {|data|
      disp_char(addr, data.hex)
    }
    return false
  end 

  def send_data()
    # リアルタイムキー入力
    while buff = $stdin.getch
      code = ''
      buff.bytes.each {|c| code += sprintf("%02X", c)}
      
      return code
    end
  end

  private

  def disp_char(addr, data)
    col, row = xydecode(addr)
    EscSeq.move_pos(row + 1, col * 2 + 1, disp2chr(data))
  end

  # アドレスから、X位置とY位置の算出
  # @param addr [Fixnum]  VRAMアドレス（0x0000～）
  # @return [Fixnum]  X位置（0～39）
  # @return [Fixnum]  Y位置（0～24）
  def xydecode(addr)
    x = addr % DISP_WIDTH
    y = addr / DISP_WIDTH
    y = DISP_HEIGHT - 1 if y >= DISP_HEIGHT
    return x, y
  end

  # X位置とY位置からアドレスを算出
  # @param [Fixnum]  X位置（0～39）
  # @param [Fixnum]  Y位置（0～24）
  # @return [Fixnum]  VRAMアドレス（0x0000～）
  def xyencode(x, y)
    return y * DISP_HEIGHT + x
  end

  # ディスプレイコードを文字列に変換
  def disp2chr(disp)
    @charmap[disp.to_i].chr(Encoding::CP932)
  end

end 

begin
  vsv = RZ80Console.new
  vsv.start

#rescue => ex
#  @tcp_cl.puts ex.to_s
#  self.close()
end